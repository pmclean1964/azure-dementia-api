name: Deploy Serverless Dementia API (Azure Functions)

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  # App RG (where your Functions and other app resources live)
  AZURE_RESOURCE_GROUP: rg-dementia
  AZURE_REGION: eastus
  DATABASE_NAME: dementia

  # SQL server lives in a DIFFERENT RG:
  SQL_SERVER_RG: rg-sql-free-eastus2

concurrency:
  group: deploy-main
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Verify Azure CLI
        shell: bash
        run: |
          set -Eeuo pipefail
          az version
          az account show --query "{name:name, id:id, user:user.name}" -o table

      - name: Ensure app resource group exists (idempotent)
        shell: bash
        run: |
          set -Eeuo pipefail
          if ! az group show --name "$AZURE_RESOURCE_GROUP" >/dev/null 2>&1; then
            echo "Creating $AZURE_RESOURCE_GROUP in $AZURE_REGION..."
            az group create --name "$AZURE_RESOURCE_GROUP" --location "$AZURE_REGION" -o none
          else
            echo "Resource group $AZURE_RESOURCE_GROUP already exists."
          fi

      - name: Resolve SQL server FQDN (secret or auto in SQL RG)
        id: fqdn
        shell: bash
        env:
          # Make sure you created this repo secret with your server FQDN
          # e.g. dementia-sql-dev.database.windows.net
          SQL_SERVER_FQDN: ${{ secrets.SQL_SERVER_FQDN }}
        run: |
          set -Eeuo pipefail
          if [ -n "${SQL_SERVER_FQDN:-}" ]; then
            echo "Using SQL server from secret."
            echo "fqdn=$SQL_SERVER_FQDN" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          echo "No SQL_SERVER_FQDN secret set; discovering one in RG: $SQL_SERVER_RG"
          FQDN=$(az sql server list -g "$SQL_SERVER_RG" --query "[0].fullyQualifiedDomainName" -o tsv)
          if [ -z "$FQDN" ] || [ "$FQDN" = "None" ]; then
            echo "No SQL server found in $SQL_SERVER_RG."
            echo "Set the repo secret SQL_SERVER_FQDN or create the server first."
            exit 1
          fi
          echo "Discovered SQL server: $FQDN"
          echo "fqdn=$FQDN" >> "$GITHUB_OUTPUT"

      - name: Deploy infra (Bicep)
        shell: bash
        run: |
          set -Eeuo pipefail
          DEPLOYMENT_NAME=infra
          az deployment group create \
            -g "$AZURE_RESOURCE_GROUP" \
            -n "$DEPLOYMENT_NAME" \
            -f infrastructure/infra.bicep \
            -p apiKey="${{ secrets.API_KEY }}" \
               sqlServerFqdn="${{ steps.fqdn.outputs.fqdn }}" \
               sqlServerResourceGroup="${SQL_SERVER_RG}" \
               sqlDatabase="${DATABASE_NAME}" \
            -o none

      - name: Get Function App name
        id: getname
        shell: bash
        run: |
          set -Eeuo pipefail
          DEPLOYMENT_NAME=infra
          NAME=$(az deployment group show \
            -g "$AZURE_RESOURCE_GROUP" \
            -n "$DEPLOYMENT_NAME" \
            --query "properties.outputs.functionAppName.value" -o tsv)
          echo "Function App: $NAME"
          echo "name=$NAME" >> "$GITHUB_OUTPUT"

      - name: Zip package
        shell: bash
        run: |
          set -Eeuo pipefail
          cd api
          zip -r ../function.zip .

      - name: Deploy to Function App
        uses: azure/functions-action@v1
        with:
          app-name: ${{ steps.getname.outputs.name }}
          package: function.zip

      - name: Show URLs
        shell: bash
        run: |
          set -Eeuo pipefail
          DEPLOYMENT_NAME=infra
          URL=$(az deployment group show \
            -g "$AZURE_RESOURCE_GROUP" \
            -n "$DEPLOYMENT_NAME" \
            --query "properties.outputs.functionUrl.value" -o tsv)
          echo "Swagger UI: $URL/swagger"
          echo "Swagger JSON: $URL/swagger.json"
